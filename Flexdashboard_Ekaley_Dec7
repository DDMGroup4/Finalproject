---
title: "BIKE TRIPS IN MANHATTAN"
output: 
  flexdashboard::flex_dashboard:
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
#Loaders
library(flexdashboard)
library(dplyr)
library(ggmap)
library(data.table)
library(shiny)
library(leaflet)
library(fossil)
library(DT)
```

```{r, echo= FALSE}
#DATA

# Creating and formatting the dataset
dat <- tbl_df(read.csv( "DC Bike Share.csv", stringsAsFactors=F ))
dat$age <- 2016 - dat$birth.year

#TAB 1: distance subsets

#dropping cases where start and end station are =
dis <- dat
###dis <- filter(dis,  start.station.id != end.station.id)

#function to convert lat and long to radians
deg2rad <- function(deg) return(deg*pi/180)

# generating variables with radians
dis <- mutate(dis, 
              long1 = deg2rad(start.station.longitude),
              lat1 = deg2rad(start.station.latitude),
              long2 = deg2rad(end.station.longitude),
              lat2 = deg2rad(end.station.latitude)
              )              

#function to calculate distance using great circle
gcd.slc <- function(long1, lat1, long2, lat2) {
  R <- 6371 # Earth mean radius [km]
  d <- acos(sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2) * cos(long2-long1)) * R
  return(d) # Distance in km
}

# Generating variable with the distance.
dis <- mutate(dis, distance = gcd.slc(long1, lat1, long2, lat2))


# TAB 2: data subsetS

frequencytable <- data.frame(table(dat$start.station.name, dat$end.station.name))
colnames(frequencytable) <- c("start.station.name", "end.station.name", "frequency")

end.station <- unique(data.frame (dat$end.station.name,dat$end.station.latitude,dat$end.station.longitude))

start.station <- unique(data.frame(dat$start.station.name, dat$start.station.latitude,dat$start.station.longitude))

dat.map.start <- merge(frequencytable, start.station , by.x = c("start.station.name"), by.y = c("dat.start.station.name"), all.x = T )
dat.map <- merge(dat.map.start, end.station , by.x = c("end.station.name"), by.y = c("dat.end.station.name"), all.x = T )
colnames(dat.map) <- c("start.station.name", "end.station.name", "frequency","end.station.latitude", "end.station.longitude", "start.station.latitude","start.station.longitude")
dat.map.rank <- data.table(dat.map, key = 'start.station.name')
dat.map.group <- transform(dat.map.rank, Rank = ave (frequency, start.station.name, FUN = function(x) + rank (-x, ties.method ="min")))
dat.map.ten <- dat.map.group


```


The Behaviour of NYC Citibikers
===================================== 

Column {.tabset .tabset-fade} 
-----------------------------    

### Bike Trip Frequencies

#### Description

In this tab we can put some information about the difference between subscriberss and consumers. 

The graph is just an example

####  Graph

```{r}
day <- substring(dat$starttime,3,4)
day <- gsub("/","",day)
day <- as.numeric(day)
day.data <- data.frame(table(day))


par(mar=c(2,2,2,2))  
plot.new()
ymin <- min(day.data$Freq)
ymax <- max(day.data$Freq)
plot.window( 
  xlim =c(-1,31),
  ylim=c(ymin,ymax),
  xaxt = "n",
  yaxt = "n"
  )

x1 <- c(1:31) 
y1 <- c("0","1000","5000","10000","15000")

lines(x=day.data$day, y=day.data$Freq,bty="n",yaxt="n", col="seagreen3")

mtext(1:31, at=1:31, side = 1, line = -0.5, las = 1, cex = 0.7)
mtext("Day of the Month", side = 1, line = 0.7, las = 1, cex = 0.9, font = 2)

# y and x labels
text(-1, 2000, labels="2,000", cex = 0.7)
text(-1, 4000, labels="4,000", cex = 0.7)
text(-1, 6000, labels="6,000", cex = 0.7)
text(-1, 8000, labels="8,000", cex = 0.7)
text(-1, 10000, labels="10,000", cex = 0.7)
text(-1, 12000, labels="12,000", cex = 0.7)
text(-1, 14000, labels="14,000", cex = 0.7)
text(-1, 16000, labels="16,000", cex = 0.7)
text(-1, 18000, labels="18,000", cex = 0.7)


# Title & subtitle
text(6, 16380, labels="Bike Trip Frequencies", cex = 1.2, font = 2)
text(2.8, 15700, labels="January 2015", cex = 0.8)
text(3.75, 15200, labels="Weekends & Holidays", cex = 0.6)
text(4, 14800, labels="Weather Related Events", cex = 0.6)
points(x=1, y= 15200, col ="red", pch = 19)
points(x=1, y= 14800, col ="black", pch = 19 )


# Captions
segments(18, 1795 , 20, 1795)
text(23.2, 1795, labels = "Ice storm causing         \nhundreds of accidents ", cex = 0.7)
segments(1, 5317 , 1, 3700)
text(2.1, 3400, labels = "New Year", cex = 0.7)
segments(27, 1214 , 28.6, 1214)
text(30.2, 1600, labels = "   Blizzard Hits\nManhattan", cex = 0.7)
segments(19, 10710, 19, 8000)
text(20.15,7500, labels = "       Martin Luther \nKing Day", cex= 0.7)



# Points
holiday <- c(1,3,4,10,11,17,18,19,24,25,31) 
number.holiday <- day.data$Freq[holiday]
points(x=holiday,y=number.holiday,col="red",pch=19)

nonholiday <- c(2,5,6,7,8,9,12,13,14,15,16,20,21,22,23,26,27,28,29,30)
number.nonholiday <- day.data$Freq[nonholiday]
points(x=nonholiday, y= number.nonholiday, col="seagreen3", pch=20)

weatherevents <- c(18,27)
number.weatherevents <- day.data$Freq[weatherevents]
points(x=weatherevents, y=number.weatherevents, col="black", pch=19)

```


### Bike Trip Frequency By Hour

#### Description
Here we can put the graph that mei computed about the most busy stations. 
the graph is also just an example

####  Graph

```{r}
hour <- substring(dat$starttime,10,15)
hour <- gsub("",":",hour)
hour.data <- data.frame(table(hour))

par(mar=c(2,3,3,3))
plot.new()
ymin <- min(hour.data$Freq)
ymax <- max(hour.data$Freq)
plot.window( xlim =c(-300,2359),ylim=c(-50,550))


lines.default(x=hour.data$hour,y=hour.data$Freq,bty="n",yaxt="n",col="orange")

text(0,-50,label="0AM",cex=0.7)
text(300,-50,label="3AM",cex=0.7)
text(600,-50,label="6AM",cex=0.7)
text(900,-50,label="9AM",cex=0.7)
text(1200,-50,label="12AM",cex=0.7)
text(1500,-50,label="3PM",cex=0.7)
text(1800,-50,label="6PM",cex=0.7)
text(2100,-50,label="9PM",cex=0.7)
text(2400,-50,label="12PM",cex=0.7)
mtext("Hour of the Day",side=1,line=0.1, cex=0.8,font=2)

text(-200,100,label="100",cex=0.7)
text(-200,200,label="200",cex=0.7)
text(-200,300,label="300",cex=0.7)
text(-200,400,label="400",cex=0.7)

text(350,530,label="Bike trip frequency",cex=0.8,font=2)
text(200,500,label="January 2015",cex=0.6)
```

### Distance travelled

#### Description

Here we can put the graph elaborated by ekaley and Yo. 
The modal distance is less that one km. 
The trips that have 0 km are cases where the bike was collected and left at the same station. 

####  Graph

```{r}
#rendering histogram
  par(mar=c(4,4,4,4))  
  hist(dis$distance,
       breaks = seq(0, 9.5, by=0.1),
       main = NA,
       xlab = NA,
       ylab = NA,
       col = "turquoise3",
       yaxt = "n",
       xaxt = "n",
       xlim = c(-0.5,6),
       ylim = c(0,20000),
       lty = 0
       ) 
  text(-0.5, 1000, labels="1,000", cex = 0.7)
  text(-0.5, 4000, labels="4,000", cex = 0.7)
  text(-0.5, 7000, labels="7,000", cex = 0.7)
  text(-0.5, 10000, labels="10,000", cex = 0.7)
  text(-0.5, 13000, labels="13,000", cex = 0.7)
  text(-0.5, 16000, labels="16,000", cex = 0.7)
  text(-0.5, 19000, labels="19,000", cex = 0.7)
  
  text(4, 17000, labels="Frequency Distribution\nof Distances Travelled  ", cex = 1.3, font = 2)
  text(3.62, 14850, labels="In Km, between two different stations", cex = 0.7)
  
  mtext(0:6, at=0:6, side = 1, line = 0, las = 1, cex = 0.7)
  mtext("Frequency", side = 2, line = 1, cex = 0.85, font = 2)
  mtext("Distance (Km)", side = 1, line = 1.5, cex = 0.85, font = 2)
```


Interactive MAP of NYC CitiBike's Trips
=====================================     

Column {.sidebar}
-----------------------------    
Chose your destiny:

```{r}
selectInput( 
             inputId= 'StartStation', 
             label='Select Start Station',
             choices = unique(dat.map.ten$start.station.name),
             selected = "1 Ave & E 15 St"
           )
sliderInput("RankRange", label = ("Rank Range"), min = 1, 
        max = 100, value = 10)
sliderInput("Zoom", label = ("Zoom Bar"), min = 10, 
        max = 20, value = 12)
```


Column  {.tabset .tabset-fade} 
-----------------------------    
### First MAP

We can put text on top or under. We must decide here are random chunks of text.

### Second MAP

The modal distance is less that one km. 
The trips that have 0 km are cases where the bike was collected and left at the same. The trips that have 0 km are cases where the bike was collected and left at the same station.The longest distane trip was 6 km. That is like riding from. The modal distance is less that one km. The trips that have 0 km are cases where the bike was collected and left at the same station. 


### Most Frequent trips by Station
    
```{r}
renderPlot({

nyc <- get_map( location='new york city, ny', zoom = input$Zoom, color="bw" ) 
ggmap(nyc)

start_point <- ggmap(nyc, extent= "device") 
start_point <- start_point + geom_point( data = dat.map.ten[dat.map.ten$start.station.name == input$StartStation & dat.map.ten$Rank <= input$RankRange],aes( x=start.station.longitude, y=start.station.latitude),color="black", size=3)
start_point

end_point <- start_point + geom_point( data=dat.map.ten[dat.map.ten$start.station.name== input$StartStation & dat.map.ten$Rank <= input$RankRange], aes( x=end.station.longitude, y=end.station.latitude), color="blue", size=3)
end_point 

end_point + geom_leg(aes(x = start.station.longitude, y = start.station.latitude, xend = end.station.longitude, yend = end.station.latitude, size = frequency, color = Rank, size = 6), data = dat.map.ten[dat.map.ten$start.station.name== input$StartStation & dat.map.ten$Rank <= input$RankRange] )+ guides(shape=guide_legend(override.aes=list(size=20)))

})
```

***

The modal distance is less that one km.The trips that have 0 km are cases where the bike was collected and left at the same station.The longest distane trip was 6 km. That is like riding from. The modal distance is less that one km. The trips that have 0 km are cases where the bike was collected and left at the same station. 

Data table
=====================================     

Here we can put the data table 
```{r}
DT:: datatable(head(dat, 2000), options = list(columnDefs = list(list(className = 'dt-center', targets = 5)),  pageLength = 5, lengthMenu = c(5, 10, 15, 20)))


```
