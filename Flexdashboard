---
title: "BIKE TRIPS IN MANHATTAN"
output: 
  flexdashboard::flex_dashboard:
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
#Loaders
library(flexdashboard)
library(dplyr)
library(ggmap)
library(data.table)
library(shiny)
library(leaflet)
library(fossil)

```

```{r, echo= FALSE}
#DATA

# Creating and formatting the dataset
dat <- tbl_df(read.csv( "DC Bike Share.csv", stringsAsFactors=F ))
dat$age <- 2016 - dat$birth.year
#TAB 1: distance subsets

#dropping cases where start and end station are =
dis <- dat
###dis <- filter(dis,  start.station.id != end.station.id)

#function to convert lat and long to radians
deg2rad <- function(deg) return(deg*pi/180)

# generating variables with radians
dis <- mutate(dis, 
              long1 = deg2rad(start.station.longitude),
              lat1 = deg2rad(start.station.latitude),
              long2 = deg2rad(end.station.longitude),
              lat2 = deg2rad(end.station.latitude)
              )              

#function to calculate distance using great circle
gcd.slc <- function(long1, lat1, long2, lat2) {
  R <- 6371 # Earth mean radius [km]
  d <- acos(sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2) * cos(long2-long1)) * R
  return(d) # Distance in km
}

# Generating variable with the distance.
dis <- mutate(dis, distance = gcd.slc(long1, lat1, long2, lat2))


# TAB 2: data subsetS

frequencytable <- data.frame(table(dat$start.station.name, dat$end.station.name))
colnames(frequencytable) <- c("start.station.name", "end.station.name", "frequency")

end.station <- unique(data.frame (dat$end.station.name,dat$end.station.latitude,dat$end.station.longitude))

start.station <- unique(data.frame(dat$start.station.name, dat$start.station.latitude,dat$start.station.longitude))

dat.map.start <- merge(frequencytable, start.station , by.x = c("start.station.name"), by.y = c("dat.start.station.name"), all.x = T )
dat.map <- merge(dat.map.start, end.station , by.x = c("end.station.name"), by.y = c("dat.end.station.name"), all.x = T )
colnames(dat.map) <- c("start.station.name", "end.station.name", "frequency","end.station.latitude", "end.station.longitude", "start.station.latitude","start.station.longitude")
dat.map.rank <- data.table(dat.map, key = 'start.station.name')
dat.map.group <- transform(dat.map.rank, Rank = ave (frequency, start.station.name, FUN = function(x) + rank (-x, ties.method ="min")))
dat.map.ten <- dat.map.group


```


The Behaviour of NYC Citibikers
===================================== 

Column {.tabset .tabset-fade} 
-----------------------------    

### Subscribers and Consumers

#### Description

In this tab we can put some information about the difference between subscriberss and consumers. 

The graph is just an example

####  Graph

```{r}
 hist(dis$distance)
```


### Most busy stations

#### Description
Here we can put the graph that mei computed about the most busy stations. 
the graph is also just an example

####  Graph

```{r}
 hist(dis$distance)
```

### Distance travelled

#### Description

Here we can put the graph elaborated by ekaley and Yo. 
The modal distance is less that one km. 
The trips that have 0 km are cases where the bike was collected and left at the same station. 

####  Graph

```{r}
#rendering histogram
  par(mar=c(4,4,4,4))  
  hist(dis$distance,
       breaks = seq(0, 9.5, by=0.1),
       main = NA,
       xlab = NA,
       ylab = NA,
       col = "turquoise3",
       yaxt = "n",
       xaxt = "n",
       xlim = c(-0.5,6),
       ylim = c(0,20000),
       lty = 0
       ) 
  text(-0.5, 1000, labels="1,000", cex = 0.7)
  text(-0.5, 4000, labels="4,000", cex = 0.7)
  text(-0.5, 7000, labels="7,000", cex = 0.7)
  text(-0.5, 10000, labels="10,000", cex = 0.7)
  text(-0.5, 13000, labels="13,000", cex = 0.7)
  text(-0.5, 16000, labels="16,000", cex = 0.7)
  text(-0.5, 19000, labels="19,000", cex = 0.7)
  
  text(4, 17000, labels="Frequency Distribution\nof Distances Travelled  ", cex = 1.3, font = 2)
  text(3.62, 14850, labels="In Km, between two different stations", cex = 0.7)
  
  mtext(0:6, at=0:6, side = 1, line = 0, las = 1, cex = 0.7)
  mtext("Frequency", side = 2, line = 1, cex = 0.85, font = 2)
  mtext("Distance (Km)", side = 1, line = 1.5, cex = 0.85, font = 2)
```


Most Frequent trips by Station (Map)
=====================================     

Column {.sidebar}
-----------------------------    
Chose your destiny:

```{r}
selectInput( 
             inputId= 'StartStation', 
             label='Select Start Station',
             choices = unique(dat.map.ten$start.station.name),
             selected = "1 Ave & E 15 St"
           )
sliderInput("RankRange", label = ("Rank Range"), min = 1, 
        max = 100, value = 10)
sliderInput("Zoom", label = ("Zoom Bar"), min = 10, 
        max = 20, value = 12)
```


Column 
-----------------------------    
  
We can put text on top or under. We must decide here are random chunks of text.

The modal distance is less that one km. 
The trips that have 0 km are cases where the bike was collected and left at the same. The trips that have 0 km are cases where the bike was collected and left at the same station.The longest distane trip was 6 km. That is like riding from. The modal distance is less that one km. The trips that have 0 km are cases where the bike was collected and left at the same station. 

***
    
```{r}
renderPlot({

nyc <- get_map( location='new york city, ny', zoom = input$Zoom, color="bw" ) 
ggmap(nyc)

start_point <- ggmap(nyc, extent= "device") 
start_point <- start_point + geom_point( data = dat.map.ten[dat.map.ten$start.station.name == input$StartStation & dat.map.ten$Rank <= input$RankRange],aes( x=start.station.longitude, y=start.station.latitude),color="black", size=3)
start_point

end_point <- start_point + geom_point( data=dat.map.ten[dat.map.ten$start.station.name== input$StartStation & dat.map.ten$Rank <= input$RankRange], aes( x=end.station.longitude, y=end.station.latitude), color="blue", size=3)
end_point 

end_point + geom_leg(aes(x = start.station.longitude, y = start.station.latitude, xend = end.station.longitude, yend = end.station.latitude, size = frequency, color = Rank, size = 6), data = dat.map.ten[dat.map.ten$start.station.name== input$StartStation & dat.map.ten$Rank <= input$RankRange] )+ guides(shape=guide_legend(override.aes=list(size=20)))

})
```

***

The modal distance is less that one km.The trips that have 0 km are cases where the bike was collected and left at the same station.The longest distane trip was 6 km. That is like riding from. The modal distance is less that one km. The trips that have 0 km are cases where the bike was collected and left at the same station. 

Data table
=====================================     

Here we can put the data table 

